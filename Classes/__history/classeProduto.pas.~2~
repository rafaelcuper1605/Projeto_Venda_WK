unit classeProduto;


interface

uses
  FireDAC.Comp.Client, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait ,SysUtils, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet;

type

  TCliente = class
    FCodigoProduto: integer;
    FDescricao: string;
    FPrecoVenda: Double;
    Conexao : TFDConnection;
    FQry: TFDQuery;

    procedure SetCodigoProduto(const Value: integer);
    procedure SetDescricao(const Value: string);
    procedure SetPrecoVenda(const Value: Double);

  private
    { private declarations }
  protected
    { protected declarations }
  public
    { public declarations }
    constructor Create(Conn: TFDConnection);

    property CodigoProduto : integer read FCodigoProduto write SetCodigoProduto;
    property Nome : string read FNome write SetNome;
    property Cidade : string read FCidade write SetCidade;
    property UF : string read FUF write SetUF;
    property Qry : TFDQuery read FQry write SetQry;

    function Selecionar(CodigoCliente: Integer; Nome: String):Boolean;

  published
    { published declarations }

  end;

implementation

constructor TCliente.Create(Conn: TFDConnection);
begin
  Conexao         := Conn;
  Qry             := TFDQuery.Create(nil);
  Qry.Connection  := Conexao;
end;

function TCliente.getCidade: string;
begin
  Result:= FCidade;
end;

function TCliente.getCodigoCliente: integer;
begin
  Result:= FCodigoCliente;
end;


function TCliente.getNome: string;
begin
  Result:= FNome;
end;

function TCliente.getUF: string;
begin
  Result:= FUF;
end;

function TCliente.Selecionar(CodigoCliente: Integer; Nome: String): Boolean;
begin
  with Qry do
  begin
    Close;
    Sql.Text := ' Select * from Cliente where 1=1 ';

    if CodigoCliente > 0 then
    begin
      Sql.add(' and codigo_cliente = :Codigo ');
      ParamByName('Codigo').Value:= CodigoCliente;
    end;

    if Nome <> '' then
      sql.add(' and Nome like '+quotedstr('%'+Nome+'%'));

    try

      Open;
      FCodigoCliente:= FieldByName('codigo_cliente').AsInteger;
      FNome:= FieldByName('nome').AsString;
      FCidade:= FieldByName('cidade').AsString;
      FUF:= FieldByName('uf').AsString;

      Result := RecordCount > 0;
    except
      Result := false;
    end;
  end;
end;

procedure TCliente.SetCidade(const Value: string);
begin
  FCidade:= Value;
end;

procedure TCliente.SetCodigoCliente(const Value: integer);
begin
  FCodigoCliente:= Value;
end;

procedure TCliente.SetNome(const Value: string);
begin
  FNome:= Value;
end;

procedure TCliente.SetQry(const Value: TFDQuery);
begin
  FQry:= Value;
end;

procedure TCliente.SetUF(const Value: string);
begin
  FUF:= Value;
end;

end.

